package convert

import (
	"errors"
	"fmt"
	"sort"
	"strconv"
	"strings"

	"github.com/hashicorp/hcl/v2/hclsyntax"
	"github.com/hashicorp/hcl/v2/hclwrite"
	"github.com/mongodb-labs/atlas-cli-plugin-terraform/internal/hcl"
	"github.com/zclconf/go-cty/cty"
)

const (
	resourceType     = "resource"
	dataSourceType   = "data"
	cluster          = "mongodbatlas_cluster"
	advCluster       = "mongodbatlas_advanced_cluster"
	clusterPlural    = "mongodbatlas_clusters"
	advClusterPlural = "mongodbatlas_advanced_clusters"
	valClusterType   = "REPLICASET"
	valMaxPriority   = 7
	valMinPriority   = 1
	errFreeCluster   = "free cluster (because no " + nRepSpecs + ")"
	errRepSpecs      = "setting " + nRepSpecs
	errConfigs       = "setting " + nConfig
	errPriority      = "setting " + nPriority
	errNumShards     = "setting " + nNumShards
)

type attrVals struct {
	req map[string]hclwrite.Tokens
	opt map[string]hclwrite.Tokens
}

// ClusterToAdvancedCluster transforms all mongodbatlas_cluster definitions in a
// Terraform configuration file into mongodbatlas_advanced_cluster schema v2 definitions.
// All other resources and data sources are left untouched.
// Note: hclwrite.Tokens are used instead of cty.Value so expressions with interpolations like var.region can be preserved.
// cty.Value only supports literal expressions.
func ClusterToAdvancedCluster(config []byte) ([]byte, error) {
	parser, err := hcl.GetParser(config)
	if err != nil {
		return nil, err
	}
	for _, block := range parser.Body().Blocks() {
		converted, err := convertResource(block)
		if err != nil {
			return nil, err
		}
		converted = converted || convertDataSource(block)
		if converted {
			blockb := block.Body()
			blockb.AppendNewline()
			hcl.AppendComment(blockb, "Generated by atlas-cli-plugin-terraform.")
			hcl.AppendComment(blockb, "Please confirm that all references to this resource are updated.")
		}
	}
	return parser.Bytes(), nil
}

func convertResource(block *hclwrite.Block) (bool, error) {
	if block.Type() != resourceType || getResourceName(block) != cluster {
		return false, nil
	}
	setResourceName(block, advCluster)
	blockb := block.Body()
	if errDyn := checkDynamicBlock(blockb); errDyn != nil {
		return false, errDyn
	}

	var err error
	if blockb.FirstMatchingBlock(nRepSpecs, nil) != nil {
		err = fillCluster(blockb)
	} else {
		err = fillFreeTierCluster(blockb)
	}
	if err != nil {
		return false, err
	}
	return true, nil
}

func convertDataSource(block *hclwrite.Block) bool {
	if block.Type() != dataSourceType {
		return false
	}
	convertMap := map[string]string{
		cluster:       advCluster,
		clusterPlural: advClusterPlural,
	}
	if newName, found := convertMap[getResourceName(block)]; found {
		setResourceName(block, newName)
		block.Body().SetAttributeValue(nUseRepSpecsPerShard, cty.True)
		return true
	}
	return false
}

// fillFreeTierCluster is the entry point to convert clusters in free tier
func fillFreeTierCluster(resourceb *hclwrite.Body) error {
	resourceb.SetAttributeValue(nClusterType, cty.StringVal(valClusterType))
	config := hclwrite.NewEmptyFile()
	configb := config.Body()
	hcl.SetAttrInt(configb, nPriority, valMaxPriority)
	if err := hcl.MoveAttr(resourceb, configb, nRegionNameSrc, nRegionName, errFreeCluster); err != nil {
		return err
	}
	if err := hcl.MoveAttr(resourceb, configb, nProviderName, nProviderName, errFreeCluster); err != nil {
		return err
	}
	if err := hcl.MoveAttr(resourceb, configb, nBackingProviderName, nBackingProviderName, errFreeCluster); err != nil {
		return err
	}
	electableSpec := hclwrite.NewEmptyFile()
	if err := hcl.MoveAttr(resourceb, electableSpec.Body(), nInstanceSizeSrc, nInstanceSize, errFreeCluster); err != nil {
		return err
	}
	configb.SetAttributeRaw(nElectableSpecs, hcl.TokensObject(electableSpec.Body()))

	repSpecs := hclwrite.NewEmptyFile()
	repSpecs.Body().SetAttributeRaw(nConfig, hcl.TokensArraySingle(configb))
	resourceb.SetAttributeRaw(nRepSpecs, hcl.TokensArraySingle(repSpecs.Body()))
	return nil
}

// fillCluster is the entry point to convert clusters with replications_specs (all but free tier)
func fillCluster(resourceb *hclwrite.Body) error {
	root, errRoot := popRootAttrs(resourceb)
	if errRoot != nil {
		return errRoot
	}
	resourceb.RemoveAttribute(nNumShards) // num_shards in root is not relevant, only in replication_specs
	// ok to fail as cloud_backup is optional
	_ = hcl.MoveAttr(resourceb, resourceb, nCloudBackup, nBackupEnabled, errRepSpecs)
	if err := fillReplicationSpecs(resourceb, root); err != nil {
		return err
	}
	if err := fillTagsLabelsOpt(resourceb, nTags); err != nil {
		return err
	}
	if err := fillTagsLabelsOpt(resourceb, nLabels); err != nil {
		return err
	}
	fillBlockOpt(resourceb, nTimeouts)
	fillBlockOpt(resourceb, nAdvConf)
	fillBlockOpt(resourceb, nBiConnector)
	fillBlockOpt(resourceb, nPinnedFCV)
	return nil
}

func fillReplicationSpecs(resourceb *hclwrite.Body, root attrVals) error {
	// at least one replication_specs exists here, if not it would be a free tier cluster
	var specbs []*hclwrite.Body
	for {
		var (
			specSrc = resourceb.FirstMatchingBlock(nRepSpecs, nil)
			spec    = hclwrite.NewEmptyFile()
			specb   = spec.Body()
		)
		if specSrc == nil {
			break
		}
		specbSrc := specSrc.Body()
		if err := checkDynamicBlock(specbSrc); err != nil {
			return err
		}
		// ok to fail as zone_name is optional
		_ = hcl.MoveAttr(specbSrc, specb, nZoneName, nZoneName, errRepSpecs)
		shards := specbSrc.GetAttribute(nNumShards)
		if shards == nil {
			return fmt.Errorf("%s: %s not found", errRepSpecs, nNumShards)
		}
		shardsVal, err := hcl.GetAttrInt(shards, errNumShards)
		if err != nil {
			return err
		}
		if err := fillRegionConfigs(specb, specbSrc, root); err != nil {
			return err
		}
		for range shardsVal {
			specbs = append(specbs, specb)
		}
		resourceb.RemoveBlock(specSrc)
	}
	resourceb.SetAttributeRaw(nRepSpecs, hcl.TokensArray(specbs))
	return nil
}

func fillTagsLabelsOpt(resourceb *hclwrite.Body, name string) error {
	var (
		file  = hclwrite.NewEmptyFile()
		fileb = file.Body()
		found = false
	)
	for {
		block := resourceb.FirstMatchingBlock(name, nil)
		if block == nil {
			break
		}
		key := block.Body().GetAttribute(nKey)
		value := block.Body().GetAttribute(nValue)
		if key == nil || value == nil {
			return fmt.Errorf("%s: %s or %s not found", name, nKey, nValue)
		}
		setKeyValue(fileb, key, value)
		resourceb.RemoveBlock(block)
		found = true
	}
	if found {
		resourceb.SetAttributeRaw(name, hcl.TokensObject(fileb))
	}
	return nil
}

func fillBlockOpt(resourceb *hclwrite.Body, name string) {
	block := resourceb.FirstMatchingBlock(name, nil)
	if block == nil {
		return
	}
	resourceb.RemoveBlock(block)
	resourceb.SetAttributeRaw(name, hcl.TokensObject(block.Body()))
}

func fillRegionConfigs(specb, specbSrc *hclwrite.Body, root attrVals) error {
	var configs []*hclwrite.Body
	for {
		configSrc := specbSrc.FirstMatchingBlock(nConfigSrc, nil)
		if configSrc == nil {
			break
		}
		config, err := getRegionConfig(configSrc, root)
		if err != nil {
			return err
		}
		configs = append(configs, config.Body())
		specbSrc.RemoveBlock(configSrc)
	}
	if len(configs) == 0 {
		return fmt.Errorf("%s: %s not found", errRepSpecs, nConfigSrc)
	}
	sort.Slice(configs, func(i, j int) bool {
		pi, _ := hcl.GetAttrInt(configs[i].GetAttribute(nPriority), errPriority)
		pj, _ := hcl.GetAttrInt(configs[j].GetAttribute(nPriority), errPriority)
		return pi > pj
	})
	specb.SetAttributeRaw(nConfig, hcl.TokensArray(configs))
	return nil
}

func getRegionConfig(configSrc *hclwrite.Block, root attrVals) (*hclwrite.File, error) {
	file := hclwrite.NewEmptyFile()
	fileb := file.Body()
	fileb.SetAttributeRaw(nProviderName, root.req[nProviderName])
	if err := hcl.MoveAttr(configSrc.Body(), fileb, nRegionName, nRegionName, errRepSpecs); err != nil {
		return nil, err
	}
	if err := setPriority(fileb, configSrc.Body().GetAttribute(nPriority)); err != nil {
		return nil, err
	}
	electableSpecs, errElec := getSpecs(configSrc, nElectableNodes, root)
	if errElec != nil {
		return nil, errElec
	}
	fileb.SetAttributeRaw(nElectableSpecs, electableSpecs)
	if readOnly, _ := getSpecs(configSrc, nReadOnlyNodes, root); readOnly != nil {
		fileb.SetAttributeRaw(nReadOnlySpecs, readOnly)
	}
	if analytics, _ := getSpecs(configSrc, nAnalyticsNodes, root); analytics != nil {
		fileb.SetAttributeRaw(nAnalyticsSpecs, analytics)
	}
	if autoScaling := getAutoScalingOpt(root.opt); autoScaling != nil {
		fileb.SetAttributeRaw(nAutoScaling, autoScaling)
	}
	return file, nil
}

func getSpecs(configSrc *hclwrite.Block, countName string, root attrVals) (hclwrite.Tokens, error) {
	var (
		file  = hclwrite.NewEmptyFile()
		fileb = file.Body()
		count = configSrc.Body().GetAttribute(countName)
	)
	if count == nil {
		return nil, fmt.Errorf("%s: attribute %s not found", errRepSpecs, countName)
	}
	if countVal, errVal := hcl.GetAttrInt(count, errRepSpecs); countVal == 0 && errVal == nil {
		return nil, fmt.Errorf("%s: attribute %s is 0", errRepSpecs, countName)
	}
	fileb.SetAttributeRaw(nNodeCount, count.Expr().BuildTokens(nil))
	fileb.SetAttributeRaw(nInstanceSize, root.req[nInstanceSizeSrc])
	if root.opt[nDiskSizeGB] != nil {
		fileb.SetAttributeRaw(nDiskSizeGB, root.opt[nDiskSizeGB])
	}
	if root.opt[nEBSVolumeTypeSrc] != nil {
		fileb.SetAttributeRaw(nEBSVolumeType, root.opt[nEBSVolumeTypeSrc])
	}
	if root.opt[nDiskIOPSSrc] != nil {
		fileb.SetAttributeRaw(nDiskIOPS, root.opt[nDiskIOPSSrc])
	}
	return hcl.TokensObject(fileb), nil
}

func getAutoScalingOpt(opt map[string]hclwrite.Tokens) hclwrite.Tokens {
	var (
		names = [][2]string{ // use slice instead of map to preserve order
			{nDiskGBEnabledSrc, nDiskGBEnabled},
			{nComputeEnabledSrc, nComputeEnabled},
			{nComputeMinInstanceSizeSrc, nComputeMinInstanceSize},
			{nComputeMaxInstanceSizeSrc, nComputeMaxInstanceSize},
			{nComputeScaleDownEnabledSrc, nComputeScaleDownEnabled},
		}
		file  = hclwrite.NewEmptyFile()
		fileb = file.Body()
		found = false
	)
	for _, tuple := range names {
		src, dst := tuple[0], tuple[1]
		if tokens := opt[src]; tokens != nil {
			fileb.SetAttributeRaw(dst, tokens)
			found = true
		}
	}
	if !found {
		return nil
	}
	return hcl.TokensObject(fileb)
}

func setResourceName(resource *hclwrite.Block, name string) {
	labels := resource.Labels()
	if len(labels) == 0 {
		return
	}
	labels[0] = name
	resource.SetLabels(labels)
}

func getResourceName(resource *hclwrite.Block) string {
	labels := resource.Labels()
	if len(labels) == 0 {
		return ""
	}
	return labels[0]
}

func checkDynamicBlock(body *hclwrite.Body) error {
	for _, block := range body.Blocks() {
		if block.Type() == "dynamic" {
			return errors.New("dynamic blocks are not supported")
		}
	}
	return nil
}

func setKeyValue(body *hclwrite.Body, key, value *hclwrite.Attribute) {
	keyStr, err := hcl.GetAttrString(key, "")
	if err == nil {
		if !hclsyntax.ValidIdentifier(keyStr) {
			keyStr = strconv.Quote(keyStr) // wrap in quotes so invalid identifiers (e.g. with blanks) can be used as attribute names
		}
	} else {
		keyStr = strings.TrimSpace(string(key.Expr().BuildTokens(nil).Bytes()))
		keyStr = "(" + keyStr + ")" // wrap in parentheses so non-literal expressions can be used as attribute names
	}
	body.SetAttributeRaw(keyStr, value.Expr().BuildTokens(nil))
}

func setPriority(body *hclwrite.Body, priority *hclwrite.Attribute) error {
	if priority == nil {
		return fmt.Errorf("%s: %s not found", errRepSpecs, nPriority)
	}
	valPriority, err := hcl.GetAttrInt(priority, errPriority)
	if err != nil {
		return err
	}
	if valPriority < valMinPriority || valPriority > valMaxPriority {
		return fmt.Errorf("%s: %s is %d but must be between %d and %d", errPriority, nPriority, valPriority, valMinPriority, valMaxPriority)
	}
	hcl.SetAttrInt(body, nPriority, valPriority)
	return nil
}

// popRootAttrs deletes the attributes common to all replication_specs/regions_config and returns them.
func popRootAttrs(body *hclwrite.Body) (attrVals, error) {
	var (
		reqNames = []string{
			nProviderName,
			nInstanceSizeSrc,
		}
		optNames = []string{
			nElectableNodes,
			nReadOnlyNodes,
			nAnalyticsNodes,
			nDiskSizeGB,
			nDiskGBEnabledSrc,
			nComputeEnabledSrc,
			nComputeMinInstanceSizeSrc,
			nComputeMaxInstanceSizeSrc,
			nComputeScaleDownEnabledSrc,
			nEBSVolumeTypeSrc,
			nDiskIOPSSrc,
		}
		req = make(map[string]hclwrite.Tokens)
		opt = make(map[string]hclwrite.Tokens)
	)
	for _, name := range reqNames {
		tokens, err := hcl.PopAttr(body, name, errRepSpecs)
		if err != nil {
			return attrVals{}, err
		}
		req[name] = tokens
	}
	for _, name := range optNames {
		tokens, _ := hcl.PopAttr(body, name, errRepSpecs)
		if tokens != nil {
			opt[name] = tokens
		}
	}
	return attrVals{req: req, opt: opt}, nil
}
