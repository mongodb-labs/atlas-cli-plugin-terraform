resource "mongodbatlas_advanced_cluster" "cluster" {
  project_id                     = var.project_id
  name                           = var.cluster_name
  pit_enabled                    = var.pit_enabled
  retain_backups_enabled         = var.retain_backups_enabled
  mongo_db_major_version         = var.mongodb_version
  cluster_type                   = var.cluster_type
  termination_protection_enabled = var.termination_protection_enabled
  paused                         = var.paused
  redact_client_log_data         = true
  encryption_at_rest_provider    = var.encryption_at_rest_provider




  backup_enabled = var.backup_enabled
  replication_specs = [
    for i in range(var.replication_specs.num_shards) : {
      region_configs = flatten([
        # Regions must be sorted by priority in descending order.
        for priority in range(7, 0, -1) : [
          for region in var.replication_specs.regions_config : {
            provider_name = var.provider_name
            region_name   = region.region_name
            priority      = region.priority
            electable_specs = region.electable_nodes == 0 ? null : {
              node_count      = region.electable_nodes
              instance_size   = var.provider_instance_size_name
              disk_size_gb    = var.disk_size_gb
              ebs_volume_type = var.provider_volume_type
              disk_iops       = var.provider_disk_iops
            }
            read_only_specs = region.read_only_nodes == 0 ? null : {
              node_count      = region.read_only_nodes
              instance_size   = var.provider_instance_size_name
              disk_size_gb    = var.disk_size_gb
              ebs_volume_type = var.provider_volume_type
              disk_iops       = var.provider_disk_iops
            }
            analytics_specs = region.analytics_nodes == 0 ? null : {
              node_count      = region.analytics_nodes
              instance_size   = var.provider_instance_size_name
              disk_size_gb    = var.disk_size_gb
              ebs_volume_type = var.provider_volume_type
              disk_iops       = var.provider_disk_iops
            }
            auto_scaling = {
              disk_gb_enabled = var.auto_scaling_disk_gb_enabled
            }
          } if priority == region.priority
        ]
      ])
    }
  ]
  tags = merge(
    {
      for key, value in local.tags : key => replace(value, "/", "_")
    },
    {
      tag1 = var.tag1val
    }
  )
  labels = merge(
    local.labels,
    {
      label1 = var.label1val
    }
  )
  advanced_configuration = {
    oplog_size_mb                      = var.oplog_size_mb
    transaction_lifetime_limit_seconds = var.transaction_lifetime_limit_seconds
    minimum_enabled_tls_protocol       = "TLS1_2"
    javascript_enabled                 = false
    tls_cipher_config_mode             = "CUSTOM"
    custom_openssl_cipher_config_tls12 = ["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"]
  }

  # Generated by atlas-cli-plugin-terraform.
  # Please review the changes and confirm that references to this resource are updated.
}
