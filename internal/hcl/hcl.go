package hcl

import (
	"fmt"
	"strconv"

	"github.com/hashicorp/hcl/v2"
	"github.com/hashicorp/hcl/v2/hclsyntax"
	"github.com/hashicorp/hcl/v2/hclwrite"
	"github.com/zclconf/go-cty/cty"
)

const (
	resourceType = "resource"
	cluster      = "mongodbatlas_cluster"
	advCluster   = "mongodbatlas_advanced_cluster"

	nameReplicationSpecs         = "replication_specs"
	nameRegionConfigs            = "region_configs"
	nameElectableSpecs           = "electable_specs"
	nameProviderRegionName       = "provider_region_name"
	nameRegionName               = "region_name"
	nameProviderName             = "provider_name"
	nameBackingProviderName      = "backing_provider_name"
	nameProviderInstanceSizeName = "provider_instance_size_name"
	nameInstanceSize             = "instance_size"
	nameClusterType              = "cluster_type"
	namePriority                 = "priority"
	nameNumShards                = "num_shards"
	nameBackupEnabled            = "backup_enabled"
	nameCloudBackup              = "cloud_backup"
	nameDiskSizeGB               = "disk_size_gb"

	valClusterType = "REPLICASET"
	valPriority    = 7

	errFreeCluster = "free cluster (because no " + nameReplicationSpecs + ")"
	errRepSpecs    = "setting " + nameReplicationSpecs
)

// ClusterToAdvancedCluster transforms all mongodbatlas_cluster definitions in a
// Terraform configuration file into mongodbatlas_advanced_cluster schema v2 definitions.
// All other resources and data sources are left untouched.
// Note: hclwrite.Tokens are used instead of cty.Value so expressions like var.region can be preserved.
// cty.Value only supports resolved values.
func ClusterToAdvancedCluster(config []byte) ([]byte, error) {
	parser, err := getParser(config)
	if err != nil {
		return nil, err
	}
	for _, resource := range parser.Body().Blocks() {
		labels := resource.Labels()
		resourceName := labels[0]
		if resource.Type() != resourceType || resourceName != cluster {
			continue
		}
		resourceBody := resource.Body()
		labels[0] = advCluster
		resource.SetLabels(labels)

		if resourceBody.FirstMatchingBlock(nameReplicationSpecs, nil) != nil {
			err = fillReplicationSpecs(resourceBody)
		} else {
			err = fillFreeTier(resourceBody)
		}
		if err != nil {
			return nil, err
		}

		resourceBody.AppendNewline()
		appendComment(resourceBody, "Generated by atlas-cli-plugin-terraform.")
		appendComment(resourceBody, "Please confirm that all references to this resource are updated.")
	}
	return parser.Bytes(), nil
}

func fillFreeTier(body *hclwrite.Body) error {
	body.SetAttributeValue(nameClusterType, cty.StringVal(valClusterType))
	regionConfig := hclwrite.NewEmptyFile()
	regionConfigBody := regionConfig.Body()
	setAttrInt(regionConfigBody, "priority", valPriority)
	if err := moveAttr(body, regionConfigBody, nameProviderRegionName, nameRegionName, errFreeCluster); err != nil {
		return err
	}
	if err := moveAttr(body, regionConfigBody, nameProviderName, nameProviderName, errFreeCluster); err != nil {
		return err
	}
	if err := moveAttr(body, regionConfigBody, nameBackingProviderName, nameBackingProviderName, errFreeCluster); err != nil {
		return err
	}
	electableSpec := hclwrite.NewEmptyFile()
	if err := moveAttr(body, electableSpec.Body(), nameProviderInstanceSizeName, nameInstanceSize, errFreeCluster); err != nil {
		return err
	}
	regionConfigBody.SetAttributeRaw(nameElectableSpecs, tokensObject(electableSpec))

	replicationSpec := hclwrite.NewEmptyFile()
	replicationSpec.Body().SetAttributeRaw(nameRegionConfigs, tokensArrayObject(regionConfig))
	body.SetAttributeRaw(nameReplicationSpecs, tokensArrayObject(replicationSpec))
	return nil
}

func fillReplicationSpecs(body *hclwrite.Body) error {
	diskSizeGBOptional, _ := extractAttr(body, nameDiskSizeGB, errRepSpecs)
	providerName, err := extractAttr(body, nameProviderName, errRepSpecs)
	if err != nil {
		return nil
	}

	srcReplicationSpecs := body.FirstMatchingBlock(nameReplicationSpecs, nil)
	// srcRegionsConfig := srcReplicationSpecs.Body().FirstMatchingBlock(nameRegionConfigs, nil)
	// regionName := srcRegionsConfig.Body().GetAttribute(nameRegionName)

	body.RemoveAttribute(nameNumShards) // num_shards in root is not relevant, only in replication_specs
	// ok moveAttr to fail as cloud_backup is optional
	_ = moveAttr(body, body, nameCloudBackup, nameBackupEnabled, errRepSpecs)

	electableSpec := hclwrite.NewEmptyFile()

	regionConfig := hclwrite.NewEmptyFile()
	regionConfigBody := regionConfig.Body()
	regionConfigBody.SetAttributeRaw(nameElectableSpecs, tokensObject(electableSpec))

	replicationSpec := hclwrite.NewEmptyFile()
	replicationSpec.Body().SetAttributeRaw(nameRegionConfigs, tokensArrayObject(regionConfig))
	body.SetAttributeRaw(nameReplicationSpecs, tokensArrayObject(replicationSpec))

	_, _ = diskSizeGBOptional, providerName

	body.RemoveBlock(srcReplicationSpecs)
	return nil
}

// moveAttr deletes an attribute from fromBody and adds it to toBody.
func moveAttr(fromBody, toBody *hclwrite.Body, fromAttrName, toAttrName, errPrefix string) error {
	tokens, err := extractAttr(fromBody, fromAttrName, errPrefix)
	if err == nil {
		toBody.SetAttributeRaw(toAttrName, tokens)
	}
	return err
}

// extractAttr deletes an attribute and returns it value.
func extractAttr(body *hclwrite.Body, attrName, errPrefix string) (hclwrite.Tokens, error) {
	attr := body.GetAttribute(attrName)
	if attr == nil {
		return nil, fmt.Errorf("%s: attribute %s not found", errPrefix, attrName)
	}
	tokens := attr.Expr().BuildTokens(nil)
	body.RemoveAttribute(attrName)
	return tokens, nil
}

func setAttrInt(body *hclwrite.Body, attrName string, number int) {
	tokens := hclwrite.Tokens{
		{Type: hclsyntax.TokenNumberLit, Bytes: []byte(strconv.Itoa(number))},
	}
	body.SetAttributeRaw(attrName, tokens)
}

func tokensArrayObject(file *hclwrite.File) hclwrite.Tokens {
	ret := hclwrite.Tokens{
		{Type: hclsyntax.TokenOBrack, Bytes: []byte("[")},
	}
	ret = append(ret, tokensObject(file)...)
	ret = append(ret,
		&hclwrite.Token{Type: hclsyntax.TokenCBrack, Bytes: []byte("]")})
	return ret
}

func tokensObject(file *hclwrite.File) hclwrite.Tokens {
	ret := hclwrite.Tokens{
		{Type: hclsyntax.TokenOBrack, Bytes: []byte("{")},
		{Type: hclsyntax.TokenNewline, Bytes: []byte("\n")},
	}
	ret = append(ret, file.BuildTokens(nil)...)
	ret = append(ret,
		&hclwrite.Token{Type: hclsyntax.TokenCBrack, Bytes: []byte("}")})
	return ret
}

func appendComment(body *hclwrite.Body, comment string) {
	tokens := hclwrite.Tokens{
		&hclwrite.Token{Type: hclsyntax.TokenComment, Bytes: []byte("# " + comment + "\n")},
	}
	body.AppendUnstructuredTokens(tokens)
}

func getParser(config []byte) (*hclwrite.File, error) {
	parser, diags := hclwrite.ParseConfig(config, "", hcl.Pos{Line: 1, Column: 1})
	if diags.HasErrors() {
		return nil, fmt.Errorf("failed to parse Terraform config file: %s", diags.Error())
	}
	return parser, nil
}
